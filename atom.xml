<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>decodelife</title>
  
  <subtitle>小学生学编程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-07T02:29:18.472Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>decodelife</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式简介</title>
    <link href="http://yoursite.com/2019/03/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2019/03/07/设计模式简介/</id>
    <published>2019-03-07T02:28:42.000Z</published>
    <updated>2019-03-07T02:29:18.472Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h3><blockquote><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p></blockquote><p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p><h3 id="什么是-GOF（四人帮，全拼-Gang-of-Four）？"><a href="#什么是-GOF（四人帮，全拼-Gang-of-Four）？" class="headerlink" title="什么是 GOF（四人帮，全拼 Gang of Four）？"></a>什么是 GOF（四人帮，全拼 Gang of Four）？</h3><p>在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 的书，该书首次提到了软件开发中设计模式的概念。</p><p>四位作者合称 <strong>GOF（四人帮，全拼 Gang of Four）</strong>。他们所提出的设计模式主要是基于以下的面向对象设计原则。</p><ul><li>对接口编程而不是对实现编程。</li><li>优先使用对象组合而不是继承。</li></ul><h3 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h3><p>根据设计模式的参考书<strong> Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）</strong> 中所提到的，总共有 23 种设计模式。这些模式可以分为<strong>三大类</strong>：</p><ul><li>创建型模式（Creational Patterns）</li><li>结构型模式（Structural Patterns）</li><li>行为型模式（Behavioral Patterns）。<br><br>当然，我们还会讨论另一类设计模式：J2EE 设计模式。</li></ul><table><thead><tr><th>模式 &amp; 描述</th><th>包括</th></tr></thead><tbody><tr><td><strong>创建型模式</strong><br>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</td><td>工厂模式（Factory Pattern）<br> 抽象工厂模式（Abstract Factory Pattern） 单例模式（Singleton Pattern）<br>建造者模式（Builder Pattern）<br>原型模式（Prototype Pattern）</td></tr><tr><td><strong>结构型模式</strong><br>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</td><td>适配器模式（Adapter Pattern）<br>桥接模式（Bridge Pattern）<br>过滤器模式（Filter、Criteria Pattern）<br>组合模式（Composite Pattern）<br>装饰器模式（Decorator Pattern）外观模式（Facade Pattern）<br>享元模式（Flyweight Pattern）<br>代理模式（Proxy Pattern）</td></tr><tr><td><strong>行为型模式</strong><br>这些设计模式特别关注对象之间的通信。</td><td>责任链模式（Chain of Responsibility Pattern）<br>命令模式（Command Pattern）<br>解释器模式（Interpreter Pattern）<br>迭代器模式（Iterator Pattern）<br>中介者模式（Mediator Pattern）<br>备忘录模式（Memento Pattern）<br>观察者模式（Observer Pattern）<br>状态模式（State Pattern）<br>空对象模式（Null Object Pattern）<br>策略模式（Strategy Pattern）<br>模板模式（Template Pattern）<br>访问者模式（Visitor Pattern）</td></tr><tr><td><strong>J2EE 模式</strong><br>这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。</td><td>MVC 模式（MVC Pattern）<br>业务代表模式（Business Delegate Pattern）<br>组合实体模式（Composite Entity Pattern）<br>数据访问对象模式（Data Access Object Pattern）<br>前端控制器模式（Front Controller Pattern）<br>拦截过滤器模式（Intercepting Filter Pattern）<br>服务定位器模式（Service Locator Pattern）<br>传输对象模式（Transfer Object Pattern）</td><td></td></tr></tbody></table><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><h4 id="1-开闭原则（Open-Close-Principle）"><a href="#1-开闭原则（Open-Close-Principle）" class="headerlink" title="1. 开闭原则（Open Close Principle）"></a>1. 开闭原则（Open Close Principle）</h4><p>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p><h4 id="2-里氏代换原则（Liskov-Substitution-Principle）"><a href="#2-里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="2. 里氏代换原则（Liskov Substitution Principle）"></a>2. 里氏代换原则（Liskov Substitution Principle）</h4><p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p><h4 id="3-依赖倒转原则（Dependence-Inversion-Principle）"><a href="#3-依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="3. 依赖倒转原则（Dependence Inversion Principle）"></a>3. 依赖倒转原则（Dependence Inversion Principle）</h4><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p><h4 id="4-接口隔离原则（Interface-Segregation-Principle）"><a href="#4-接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="4. 接口隔离原则（Interface Segregation Principle）"></a>4. 接口隔离原则（Interface Segregation Principle）</h4><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p><h4 id="5-迪米特法则，又称最少知道原则（Demeter-Principle）"><a href="#5-迪米特法则，又称最少知道原则（Demeter-Principle）" class="headerlink" title="5. 迪米特法则，又称最少知道原则（Demeter Principle）"></a>5. 迪米特法则，又称最少知道原则（Demeter Principle）</h4><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><h4 id="6-合成复用原则（Composite-Reuse-Principle）"><a href="#6-合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="6. 合成复用原则（Composite Reuse Principle）"></a>6. 合成复用原则（Composite Reuse Principle）</h4><p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p><p><a href="http://www.runoob.com/design-pattern/builder-pattern.html" target="_blank" rel="noopener">菜鸟设计模式教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;设计模式简介&quot;&gt;&lt;a href=&quot;#设计模式简介&quot; class=&quot;headerlink&quot; title=&quot;设计模式简介&quot;&gt;&lt;/a&gt;设计模式简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="http://yoursite.com/2019/03/07/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/03/07/策略模式/</id>
    <published>2019-03-07T02:27:59.000Z</published>
    <updated>2019-03-07T02:28:27.997Z</updated>
    
    <content type="html"><![CDATA[<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><blockquote><p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。<br>在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p></blockquote><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ol><li>算法可以自由切换。 </li><li>避免使用多重条件判断。 if……else……</li><li>扩展性良好。</li></ol><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ol><li>策略类会增多。</li><li>所有策略类都需要对外暴露。</li></ol><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><ol><li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 </li><li>一个系统需要动态地在几种算法中选择一种。 </li><li>如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</li></ol><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="https://upload-images.jianshu.io/upload_images/1762862-8c8edae14573cb8d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5a4c9d4ae4b0ee0fb8cb18db.png"></p><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jack.idea.test.designmode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略模式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ljs.song</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-01-03 16:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这几个分享者都整装待发，随时准备自己的分享时刻</span></span><br><span class="line">        XiaoChenTime xiaoChenTime = <span class="keyword">new</span> XiaoChenTime();</span><br><span class="line">        XiaoLongTime xiaoLongTime = <span class="keyword">new</span> XiaoLongTime();</span><br><span class="line">        XiaoLeiTime xiaoLeiTime = <span class="keyword">new</span> XiaoLeiTime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         如果原始的思路，需要根据时间值，分别判断该谁执行</span></span><br><span class="line"><span class="comment">        if(time == 1)&#123;</span></span><br><span class="line"><span class="comment">            xiaoChenTime.share();</span></span><br><span class="line"><span class="comment">        &#125;else if(time == 2)&#123;</span></span><br><span class="line"><span class="comment">            xiaoLongTime.share();</span></span><br><span class="line"><span class="comment">        &#125;else if(time == 3)&#123;</span></span><br><span class="line"><span class="comment">            xiaoLeiTime.share();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//今天是周二四点，由小臣来分享</span></span><br><span class="line">        SwitchTimeContext switchTimeContext = <span class="keyword">new</span> SwitchTimeContext(xiaoChenTime);</span><br><span class="line">        switchTimeContext.share();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//今天是周四四点，由小龙来分享</span></span><br><span class="line">        SwitchTimeContext switchTimeContext2 = <span class="keyword">new</span> SwitchTimeContext(xiaoLongTime);</span><br><span class="line">        switchTimeContext2.share();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//今天是周四四点半，由小磊来分享</span></span><br><span class="line">        SwitchTimeContext switchTimeContext3 = <span class="keyword">new</span> SwitchTimeContext(xiaoLeiTime);</span><br><span class="line">        switchTimeContext3.share();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">WhichTimeShare</span></span>&#123;</span><br><span class="line">    <span class="comment">//策略方法，分享</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">share</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小臣分享时刻</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoChenTime</span> <span class="keyword">implements</span> <span class="title">WhichTimeShare</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">share</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小臣分享xxxx"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小龙分享时刻</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoLongTime</span> <span class="keyword">implements</span> <span class="title">WhichTimeShare</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">share</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小龙showTime 自动化测试"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小磊分享时刻</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoLeiTime</span> <span class="keyword">implements</span> <span class="title">WhichTimeShare</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">share</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小磊分享时间  hadoop"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分配时间上下文</span></span><br><span class="line"><span class="comment"> * 这里可以利用spring ioc来切换具体的whichTimeShare 实例，从而达到替换if……else……</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwitchTimeContext</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WhichTimeShare whichTimeShare;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里场景需要，更换不同的策略实例来完成目标任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> whichTimeShare</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwitchTimeContext</span><span class="params">(WhichTimeShare whichTimeShare)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.whichTimeShare = whichTimeShare;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">share</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.whichTimeShare.share();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>创建者模式(Builder)</title>
    <link href="http://yoursite.com/2019/03/07/%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F-Builder/"/>
    <id>http://yoursite.com/2019/03/07/创建者模式-Builder/</id>
    <published>2019-03-07T02:26:49.000Z</published>
    <updated>2019-03-07T02:27:38.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建者模式"><a href="#创建者模式" class="headerlink" title="创建者模式"></a>创建者模式</h2><blockquote><p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p></blockquote><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ol><li>建造者独立，易扩展。 </li><li>便于控制细节风险。</li></ol><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ol><li>产品必须有共同点，范围有限制。 </li><li>如果内部变化复杂，会有很多的建造类。</li></ol><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><ol><li>通常用来将一个复杂的对象的构造过程分离, 让使用者可以==根据需要选择创建过程==.</li><li>当这个复杂的对象的构造包含很多可选参数时, 那Builder模式可以说是不二之选了.</li></ol><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="https://upload-images.jianshu.io/upload_images/1762862-3acc88707702694e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5a4b6405e4b078cf1ed9caf3.png"></p><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jack.idea.test.designmode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建者模式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ljs.song</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-01-02 16:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//大家的分享都有PPT文档，但是各自的格式都不一样，有的有署名，有的没有，哟肚饿有些时间，有的没有</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//小臣制作他的ppt</span></span><br><span class="line">        SharePPT xiaoChen = <span class="keyword">new</span> SharePPT.Builder()</span><br><span class="line">                .userName(<span class="string">"小臣"</span>)</span><br><span class="line">                .date(<span class="keyword">new</span> Date())</span><br><span class="line">                .location(<span class="string">"三楼接待室"</span>).build();</span><br><span class="line">        System.out.println(xiaoChen);</span><br><span class="line">        System.out.println(<span class="string">"***********************"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//小龙制作他的ppt</span></span><br><span class="line">        SharePPT xiaolong = <span class="keyword">new</span> SharePPT.Builder()</span><br><span class="line">                .userName(<span class="string">"小龙"</span>)</span><br><span class="line">                .date(<span class="keyword">new</span> Date())</span><br><span class="line">                .shareContent(<span class="string">"自动化测试"</span>).build();</span><br><span class="line">        System.out.println(xiaolong);</span><br><span class="line">        System.out.println(<span class="string">"***********************"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//小杰制作他的ppt</span></span><br><span class="line">        SharePPT xiaojie = <span class="keyword">new</span> SharePPT.Builder()</span><br><span class="line">                .userName(<span class="string">"小臣"</span>)</span><br><span class="line">                .date(<span class="keyword">new</span> Date())</span><br><span class="line">                .location(<span class="string">"火马会议室"</span>)</span><br><span class="line">                .shareContent(<span class="string">"设计模式"</span>)</span><br><span class="line">                .comment(<span class="string">"我是评论"</span>).build();</span><br><span class="line">        System.out.println(xiaojie);</span><br><span class="line">        System.out.println(<span class="string">"***********************"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分享PPT 组成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharePPT</span></span>&#123;</span><br><span class="line">    <span class="comment">//分享人</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="comment">//时间</span></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">    <span class="comment">//分享地点</span></span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line">    <span class="comment">//分享主题</span></span><br><span class="line">    <span class="keyword">private</span> String shareContent;</span><br><span class="line">    <span class="comment">//分享备注讨论</span></span><br><span class="line">    <span class="keyword">private</span> String comment;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SharePPT</span><span class="params">(String userName, Date date, String location, String shareContent, String comment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">        <span class="keyword">this</span>.location = location;</span><br><span class="line">        <span class="keyword">this</span>.shareContent = shareContent;</span><br><span class="line">        <span class="keyword">this</span>.comment = comment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SharePPT</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = builder.userName;</span><br><span class="line">        <span class="keyword">this</span>.date = builder.date;</span><br><span class="line">        <span class="keyword">this</span>.location = builder.location;</span><br><span class="line">        <span class="keyword">this</span>.shareContent = builder.shareContent;</span><br><span class="line">        <span class="keyword">this</span>.comment = builder.comment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line">        <span class="comment">//分享人</span></span><br><span class="line">        <span class="keyword">private</span> String userName;</span><br><span class="line">        <span class="comment">//时间</span></span><br><span class="line">        <span class="keyword">private</span> Date date;</span><br><span class="line">        <span class="comment">//分享地点</span></span><br><span class="line">        <span class="keyword">private</span> String location;</span><br><span class="line">        <span class="comment">//分享主题</span></span><br><span class="line">        <span class="keyword">private</span> String shareContent;</span><br><span class="line">        <span class="comment">//分享备注讨论</span></span><br><span class="line">        <span class="keyword">private</span> String comment;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定分享人</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">userName</span><span class="params">(String userName)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.userName = userName;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">date</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.date = date;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">location</span><span class="params">(String location)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.location = location;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">shareContent</span><span class="params">(String shareContent)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.shareContent = shareContent;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">comment</span><span class="params">(String comment)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.comment = comment;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> SharePPT <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SharePPT(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"SharePPT&#123;"</span>);</span><br><span class="line">        sb.append(<span class="string">"userName='"</span>).append(userName).append(<span class="string">'\''</span>);</span><br><span class="line">        <span class="keyword">if</span>(date != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">", date="</span>).append(date);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(location != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">", location='"</span>).append(location).append(<span class="string">'\''</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(shareContent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">", shareContent='"</span>).append(shareContent).append(<span class="string">'\''</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(comment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">", comment='"</span>).append(comment).append(<span class="string">'\''</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">'&#125;'</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建者模式&quot;&gt;&lt;a href=&quot;#创建者模式&quot; class=&quot;headerlink&quot; title=&quot;创建者模式&quot;&gt;&lt;/a&gt;创建者模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>模板方法模式</title>
    <link href="http://yoursite.com/2019/03/07/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/03/07/模板方法模式/</id>
    <published>2019-03-07T02:25:43.000Z</published>
    <updated>2019-03-07T02:26:19.570Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><blockquote><p>在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。</p></blockquote><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ol><li>封装不变部分，扩展可变部分。 </li><li>提取公共代码，便于维护。 </li><li>行为由父类控制，子类实现。</li></ol><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><p>每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><ol><li>有多个子类共有的方法，且逻辑相同。 </li><li>重要的、复杂的方法，可以考虑作为模板方法。</li></ol><h3 id="类图如下"><a href="#类图如下" class="headerlink" title="类图如下"></a>类图如下</h3><p><img src="https://upload-images.jianshu.io/upload_images/1762862-0d6749c52af63c8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5a4b30ffe4b078cf1ed8cfb6.png"></p><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jack.idea.test.designmode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模板方法模式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ljs.song</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-01-02 15:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Template</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//季度分享电影短片开始 顺序回顾每个人的分享流程</span></span><br><span class="line">        ShareTemp xiaojieShare = <span class="keyword">new</span> XiaoJieShare();</span><br><span class="line">        xiaojieShare.share(calendar.getTime(),<span class="string">"三楼接待室"</span>);</span><br><span class="line"></span><br><span class="line">        ShareTemp xiaochenshare = <span class="keyword">new</span> XiaoChenShare();</span><br><span class="line">        calendar.set(Calendar.DAY_OF_MONTH,<span class="number">10</span>);</span><br><span class="line">        xiaochenshare.share(calendar.getTime(),<span class="string">"总裁办公室"</span>);</span><br><span class="line"></span><br><span class="line">        ShareTemp xiaolongShare = <span class="keyword">new</span> XiaoLongShare();</span><br><span class="line">        calendar.set(Calendar.HOUR_OF_DAY,<span class="number">23</span>);</span><br><span class="line">        xiaolongShare.share(calendar.getTime(),<span class="string">"宇宙中心"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分享模板抽象类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ShareTemp</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat SIMPLE_DATE_FORMAT = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">share</span><span class="params">(Date date,String location)</span></span>&#123;</span><br><span class="line">        <span class="comment">//步骤1 首先预定时间和场地</span></span><br><span class="line">        getTime(date,location);</span><br><span class="line">        <span class="comment">//步骤2 开始真正的分享</span></span><br><span class="line">        shareContent();</span><br><span class="line">        <span class="comment">//步骤3 分享结束，讨论并关闭投影仪</span></span><br><span class="line">        end();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 步骤1 ，预定时间和地点 当然这些也可以作为抽象方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getTime</span><span class="params">(Date date,String location)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1. 我想在"</span> + SIMPLE_DATE_FORMAT.format(date) + <span class="string">" ,在"</span> + location + <span class="string">"发起分享，欢迎来看"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要子类具体实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">shareContent</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"3. 我今天的分享到这里，谢谢大家"</span>);</span><br><span class="line">        System.out.println(<span class="string">"*************关闭投影****************************"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小杰分享</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoJieShare</span> <span class="keyword">extends</span> <span class="title">ShareTemp</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shareContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"2. 我今天分享的内容是设计模式"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小龙分享</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoLongShare</span> <span class="keyword">extends</span> <span class="title">ShareTemp</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shareContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"2. 我今天分享的内容是自动化测试"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小臣分享</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoChenShare</span> <span class="keyword">extends</span> <span class="title">ShareTemp</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shareContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"2. 我今天分享的内容是变成规范之我见"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;模板方法模式&quot;&gt;&lt;a href=&quot;#模板方法模式&quot; class=&quot;headerlink&quot; title=&quot;模板方法模式&quot;&gt;&lt;/a&gt;模板方法模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://yoursite.com/2019/03/07/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/03/07/单例模式/</id>
    <published>2019-03-07T02:22:01.000Z</published>
    <updated>2019-03-07T02:24:16.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><blockquote><p>保证一个类仅有一个实例(sInstance), 并提供一个访问该实例的全局访问点(getInstance).<br>这就意味着单例通常有如下两个特点:</p><ol><li>构造函数是私有的(避免别的地方创建它)</li><li>有一个static的方法来对外提供一个该单例的实例.</li></ol></blockquote><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ol><li>在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。 </li><li>避免对资源的多重占用（比如写文件操作）。</li></ol><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ol><li>没有接口，不能继承</li></ol><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><ol><li>要求生产唯一序列号。 </li><li>WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 </li><li>创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</li></ol><hr><h3 id="1-饿汉式单利"><a href="#1-饿汉式单利" class="headerlink" title="1 饿汉式单利"></a>1 饿汉式单利</h3><blockquote><p>饿汉式单例<br>顾名思义, 就是很饿, 不管三七二十一先创建了一个实例放着, 而不管最终用不用.</p></blockquote><h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h4><ul><li><em>在不需要的情况下就随便生成对象，消耗内存，不可取</em></li></ul><h3 id="2-懒汉式单例"><a href="#2-懒汉式单例" class="headerlink" title="2 懒汉式单例"></a>2 懒汉式单例</h3><blockquote><p>“懒”, 也就是现在懒得创建, 等有用户要用的时候才创建.</p></blockquote><h3 id="3-线程安全的懒汉式单例"><a href="#3-线程安全的懒汉式单例" class="headerlink" title="3 线程安全的懒汉式单例"></a>3 线程安全的懒汉式单例</h3><blockquote><p>利用synchronized关键字来修饰对外提供该类唯一实例的接口(getInstance)来确保在一个线程调用该接口时能阻塞(block)另一个线程的调用, 从而达到多线程安全, 避免重复创建单例.</p></blockquote><h4 id="缺点：-2"><a href="#缺点：-2" class="headerlink" title="缺点："></a>缺点：</h4><ul><li><em>synchronized有很大的性能开销. 而且在这里我们是修饰了getInstance方法, 意味着, 如果getInstance被很多线程频繁调用时, 每次都会做同步检查, 会导致程序性能下降.实际上我们要的是单例, 当单例已经存在的时候, 我们是不需要用同步方法来控制的</em></li></ul><h3 id="4-双重检查单例模式"><a href="#4-双重检查单例模式" class="headerlink" title="4 双重检查单例模式"></a>4 双重检查单例模式</h3><blockquote><p>这种方式的同步使用会减少同步锁的占用比例</p></blockquote><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li><em>容易出现理解错误 不加volatile 关键字引发不必要的错误</em></li></ul><h3 id="5-静态内部类单例"><a href="#5-静态内部类单例" class="headerlink" title="5 静态内部类单例"></a>5 静态内部类单例</h3><blockquote><p>这种方式, 通过JVM的类加载方式(虚拟机会保证一个类的初始化在多线程环境中被正确的加锁、同步), 来保证了多线程并发访问的正确性.</p></blockquote><blockquote><p>另外, 由于静态内部类的加载特性 — 在使用时才加载, 这种方式也达成了懒加载的目的.</p></blockquote><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>完美 ，依赖于特定的语言</li></ul><hr><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jack.idea.test.designmode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ljs.song</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017-12-28 15:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        XiaoLong xiaoLong = <span class="keyword">new</span> XiaoLong();</span><br><span class="line">        System.out.println(xiaoLong.share(<span class="string">"小龙龙布兰妮四点分享英雄联盟王者之路和绝地求生吃鸡之秘"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        LeiLei leiLei = <span class="keyword">new</span> LeiLei();</span><br><span class="line">        System.out.println(leiLei.share(<span class="string">"磊磊四点分享英雄联盟王者之路和绝地求生吃鸡之秘"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小龙龙布兰妮分享</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoLong</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Share <span class="title">share</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        Share share = SimpleSingleton.getInstance();</span><br><span class="line">        share.title(title);</span><br><span class="line">        <span class="keyword">return</span> share;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 磊磊分享</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LeiLei</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Share <span class="title">share</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        Share share = SimpleSingleton.getInstance();</span><br><span class="line">        share.title(title);</span><br><span class="line">        <span class="keyword">return</span> share;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分享整理文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Share</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">title</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"Share&#123;"</span>);</span><br><span class="line">        sb.append(<span class="string">"fileName : "</span> + <span class="keyword">this</span>.hashCode()).append(<span class="string">" ,"</span>);</span><br><span class="line">        sb.append(<span class="string">"title='"</span>).append(title).append(<span class="string">'\''</span>);</span><br><span class="line">        sb.append(<span class="string">'&#125;'</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleSingleton</span> <span class="keyword">extends</span> <span class="title">Share</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SimpleSingleton simpleSingleton = <span class="keyword">new</span> SimpleSingleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SimpleSingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SimpleSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> simpleSingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式（饱汉）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> <span class="keyword">extends</span> <span class="title">Share</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton lazySingleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//在有人第一次分享后才创建分享的整理文件</span></span><br><span class="line">        <span class="keyword">if</span>(lazySingleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            lazySingleton = <span class="keyword">new</span> LazySingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程安全的懒汉单例  synchronized</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynchronizedLazySingleton</span> <span class="keyword">extends</span> <span class="title">Share</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SynchronizedLazySingleton synchronizedLazySingleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SynchronizedLazySingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//粗鲁人也，直接锁定整个方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SynchronizedLazySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//在有人第一次分享后才创建分享的整理文件</span></span><br><span class="line">        <span class="keyword">if</span>(synchronizedLazySingleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            synchronizedLazySingleton = <span class="keyword">new</span> SynchronizedLazySingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> synchronizedLazySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重检查锁定单例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DCLLazySingleton</span> <span class="keyword">extends</span> <span class="title">Share</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里添加volatile 关键字是因为下面注释 问题根源 S处对象的创建</span></span><br><span class="line"><span class="comment">     * 1.分配内存 2.初始化对象 3. 引用指向分配的地址</span></span><br><span class="line"><span class="comment">     * 可能会出现指令重排序</span></span><br><span class="line"><span class="comment">     * 假如 顺序变为 1,3,2 就有可能导致线程A走进S处发生重排序</span></span><br><span class="line"><span class="comment">     * 线程B 在代码N处发现对象不为空，但是却还没初始化的尴尬</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DCLLazySingleton dclLazySingleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DCLLazySingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DCLLazySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一次检查 N</span></span><br><span class="line">        <span class="keyword">if</span>(dclLazySingleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DCLLazySingleton.class)&#123;</span><br><span class="line">                <span class="comment">//第二次检查</span></span><br><span class="line">                <span class="keyword">if</span>(dclLazySingleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 问题根源 S</span></span><br><span class="line">                    dclLazySingleton = <span class="keyword">new</span> DCLLazySingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dclLazySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类单例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InnerClassSingleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">InnerClassSingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InnerClassSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Inner.INNER_CLASS_SINGLETON;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> InnerClassSingleton INNER_CLASS_SINGLETON = <span class="keyword">new</span> InnerClassSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;保证一个类仅有一个实例(sInstance), 并提供一个访问该实例的全局访问点(getInsta
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>带你入门java8新特性</title>
    <link href="http://yoursite.com/2018/09/06/%E5%B8%A6%E4%BD%A0%E5%85%A5%E9%97%A8java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2018/09/06/带你入门java8新特性/</id>
    <published>2018-09-06T12:02:12.000Z</published>
    <updated>2018-09-06T12:04:46.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="它是什么"><a href="#它是什么" class="headerlink" title="它是什么"></a>它是什么</h1><h3 id="术语定义"><a href="#术语定义" class="headerlink" title="术语定义"></a>术语定义</h3><blockquote><p><strong>百度百科定义：</strong> “Lambda 表达式”(lambda expression)是一个==匿名函数==，Lambda表达式基于数学中的λ演算得名，直接对应于其中的lambda抽象(lambda abstraction)，是一个匿名函数，即没有函数名的函数。Lambda表达式可以表示闭包</p></blockquote><h1 id="java中的实现方式"><a href="#java中的实现方式" class="headerlink" title="java中的实现方式"></a>java中的实现方式</h1><blockquote><p>lambda表达式的目标类型是“函数接口（functional interface）”，这是Java8新引入的概念。<strong>它的定义是：</strong> 一个接口，如果只有一个显式声明的抽象方法，那么它就是一个函数接口。一般用@FunctionalInterface标注出来（也可以不标）。</p></blockquote><h2 id="Lambda表达式-vs-匿名类"><a href="#Lambda表达式-vs-匿名类" class="headerlink" title="Lambda表达式 vs 匿名类"></a>Lambda表达式 vs 匿名类</h2><blockquote><p>既然lambda表达式即将正式取代Java代码中的匿名内部类，那么有必要对二者做一个比较分析。一个关键的不同点就是关键字 this。匿名类的 this 关键字指向匿名类，而lambda表达式的 this 关键字指向包围lambda表达式的类。另一个不同点是二者的编译方式。Java编译器将lambda表达式编译成类的私有方法。使用了Java 7的 invokedynamic 字节码指令来动态绑定这个方法。</p></blockquote><h1 id="同类技术："><a href="#同类技术：" class="headerlink" title="同类技术："></a>同类技术：</h1><p>Python， Ruby， Lua</p><h1 id="为什么会出现"><a href="#为什么会出现" class="headerlink" title="为什么会出现"></a>为什么会出现</h1><ol><li>简化代码</li><li>有些运算中的变量甚至是算法函数过程其实不是必须要定义出来，只是中间过渡一下</li><li>对之后stream接口集合的便利操作提供基础支持，lambda 表达式能简化集合上数据的多线程或者多核的处理，提供更快的集合处理速度</li></ol><h1 id="实例走一波"><a href="#实例走一波" class="headerlink" title="实例走一波"></a>实例走一波</h1><h3 id="1-线程创建"><a href="#1-线程创建" class="headerlink" title="1. 线程创建"></a>1. 线程创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//lambda之前</span><br><span class="line">new Thread(new Runnable()&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        System.out.println(&quot;我在努力跑&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line">//lambda之后</span><br><span class="line">new Thread(() -&gt; System.out.println(&quot;我起跑更快&quot;)).start();</span><br></pre></td></tr></table></figure><h3 id="2-Predicate-条件函数式接口，并且可以多个条件过滤"><a href="#2-Predicate-条件函数式接口，并且可以多个条件过滤" class="headerlink" title="2. Predicate 条件函数式接口，并且可以多个条件过滤"></a>2. Predicate 条件函数式接口，并且可以多个条件过滤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Predicate startsWithJ = (n) -&gt; n.startsWith(&quot;J&quot;);</span><br><span class="line"></span><br><span class="line">Predicate fourLetterLong = (n) -&gt; n.length() ==4;</span><br><span class="line"></span><br><span class="line">names.stream().filter(startsWithJ.and(fourLetterLong))</span><br><span class="line"></span><br><span class="line">.forEach((n) -&gt; System.out.print(&quot;nName, which starts with &apos;J&apos; and four letter long is : &quot;+ n));</span><br></pre></td></tr></table></figure><h3 id="3-stream-接口"><a href="#3-stream-接口" class="headerlink" title="3. stream 接口"></a>3. stream 接口</h3><ul><li><p><strong>3.1 map 操作</strong></p><p>  本例介绍最广为人知的函数式编程概念map。它允许你将对象进行转换。例如在本例中，我们将 costBeforeTax 列表的每个元素转换成为税后的值。我们将 x -&gt; x*x lambda表达式传到 map() 方法，后者将其应用到流中的每一个元素。然后用 forEach() 将列表元素打印出来。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 不使用lambda表达式为每个订单加上12%的税</span><br><span class="line">List costBeforeTax = Arrays.asList(100, 200, 300, 400, 500);</span><br><span class="line">for (Integer cost : costBeforeTax) &#123;</span><br><span class="line">    double price = cost + .12*cost;</span><br><span class="line">    System.out.println(price);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 使用lambda表达式</span><br><span class="line">List costBeforeTax = Arrays.asList(100, 200, 300, 400, 500);</span><br><span class="line">costBeforeTax.stream().map((cost) -&gt; cost + .12*cost).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ul><li><p><strong>3.2 reduce操作</strong></p><p>  在上个例子中，可以看到map将集合类（例如列表）元素进行转换的。还有一个 reduce() 函数可以将所有值合并成一个。Map和Reduce操作是函数式编程的核心操作，因为其功能，reduce 又被称为折叠操作。另外，reduce 并不是一个新的操作，你有可能已经在使用它。SQL中类似 sum()、avg() 或者 count() 的聚集函数，实际上就是 reduce 操作，因为它们接收多个值并返回一个值。流API定义的 reduceh() 函数可以接受lambda表达式，并对所有值进行合并。IntStream这样的类有类似 average()、count()、sum() 的内建方法来做 reduce 操作，也有mapToLong()、mapToDouble() 方法来做转换。这并不会限制你，你可以用内建方法，也可以自己定义。在这个Java 8的Map Reduce示例里，我们首先对所有价格应用 12% 的VAT，然后用 reduce() 方法计算总和。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 为每个订单加上12%的税</span><br><span class="line">// 老方法：</span><br><span class="line">List costBeforeTax = Arrays.asList(100, 200, 300, 400, 500);</span><br><span class="line">double total = 0;</span><br><span class="line">for (Integer cost : costBeforeTax) &#123;</span><br><span class="line">    double price = cost + .12*cost;</span><br><span class="line">    total = total + price;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;Total : &quot; + total);</span><br><span class="line"> </span><br><span class="line">// 新方法：</span><br><span class="line">List costBeforeTax = Arrays.asList(100, 200, 300, 400, 500);</span><br><span class="line">double bill = costBeforeTax.stream().map((cost) -&gt; cost + .12*cost).reduce((sum, cost) -&gt; sum + cost).get();</span><br><span class="line">System.out.println(&quot;Total : &quot; + bill);</span><br></pre></td></tr></table></figure><h4 id="4-匿名方法改进之路（Lambda-和方法引用实战）"><a href="#4-匿名方法改进之路（Lambda-和方法引用实战）" class="headerlink" title="4. 匿名方法改进之路（Lambda 和方法引用实战）"></a>4. 匿名方法改进之路（Lambda 和方法引用实战）</h4><ul><li><p>第1种：传递代码</p><p>  Java 8的API已经为你提供了一个 List 可用的 sort 方法，那么如何把排序策略传递给 sort 方法呢？sort方法的签名是这样的：</p><p>  void sort(Comparator&lt;? super E&gt; c)<br>  它需要一个 Comparator 对象来比较两个Apple！这就是在Java中传递策略的方式：它们必须包裹在一个对象里。我们说 sort 的行为被参数化了：传递给它的排序策略不同，其行为也会 不同。<br>  第一个解决方案可以是这样的：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class AppleComparator implements Comparator&lt;Apple&gt; &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public int compare(Apple o1, Apple o2) &#123;</span><br><span class="line">            return o1.getWeight().compareTo(o2.getWeight());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apples.sort(new AppleComparator())</span><br></pre></td></tr></table></figure></li><li><p>第2步：使用匿名类</p><p>  可以使用匿名类来改进方案，而不是实现一个 Comparator 却只实例化一次：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apples.sort(new Comparator&lt;Apple&gt;() &#123;</span><br><span class="line">  @Override</span><br><span class="line">  public int compare(Apple o1, Apple o2) &#123;</span><br><span class="line">      return o1.getWeight().compareTo(o2.getWeight());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>第3步：使用 Lambda 表达式</p><p>  接下来使用 Lambda 表达式来改进方案：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apples.sort((Apple a1,Apple a2) -&gt; a1.getWeight().compareTo(a2.getWeight()));</span><br></pre></td></tr></table></figure><p>  Comparator 具有一个叫作 comparing 的静态辅助方法，它可以接受一个 Function 来提取 Comparable 键值，并生成一个 Comparator 对象，它可以像下面这样用（注意你现在传递的Lambda只有一 个参数：Lambda说明了如何从苹果中提取需要比较的键值）：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apples.sort(Comparator.comparing(((Apple apple) -&gt; apple.getWeight())));</span><br></pre></td></tr></table></figure></li><li><p>第4步：使用方法引用</p><p>  方法引用就是替代那些转发参数的 Lambda 表达式的语法糖。可以用方法引 用改进方案如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apples.sort(Comparator.comparing(Apple::getWeight));</span><br></pre></td></tr></table></figure></li></ul><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>如上所述，lambda表达式等新特性给我们编程实现带来了新的支持可能，更加方便的计算（尤其是集合）</p><ul><li><p>Lambda表达式可以理解为一种匿名函数：它没有名称，但有参数列表、函数主体、返回 类型，可能还有一个可以抛出的异常的列表。</p></li><li><p>Lambda表达式让你可以简洁地传递代码。</p></li><li><p>函数式接口就是仅仅声明了一个抽象方法的接口。</p></li><li><p>只有在接受函数式接口的地方才可以使用Lambda表达式。</p></li><li><p>Lambda表达式允许你直接内联，为函数式接口的抽象方法提供实现，并且将整个表达式作为函数式接口的一个实例。</p></li><li><p>Java 8自带一些常用的函数式接口，放在java.util.function包里，包括Predicate<t>、Function&lt;T,R&gt;、Supplier<t>、Consumer<t>和BinaryOperator<t>。</t></t></t></t></p></li><li><p>为了避免装箱操作，对Predicate<t>和Function&lt;T, R&gt;等通用函数式接口的原始类型特化：IntPredicate、IntToLongFunction等。</t></p></li><li><p>环绕执行模式（即在方法所必需的代码中间，你需要执行点儿什么操作，比如资源分配 和清理）可以配合 Lambda 提高灵活性和可重用性。</p></li><li><p>Lambda 表达式所需要代表的类型称为目标类型。</p></li><li><p>方法引用让你重复使用现有的方法实现并直接传递它们。</p></li><li><p>Comparator、Predicate和Function等函数式接口都有几个可以用来结合 Lambda 表达式的默认方法。</p></li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="http://www.jianshu.com/p/f569c090ec15" target="_blank" rel="noopener">理解java8 lambda http://www.jianshu.com/p/f569c090ec15</a></li><li><a href="http://www.importnew.com/16436.html" target="_blank" rel="noopener">Java8 lambda表达式10个示例</a></li><li><a href="http://www.jianshu.com/p/4b6a875694f0" target="_blank" rel="noopener">java8 新特性</a></li><li><a href="http://www.jianshu.com/p/b0ccbea7213e" target="_blank" rel="noopener">深入理解Java 8 Lambda表达式（Oracle官方文档版）</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;它是什么&quot;&gt;&lt;a href=&quot;#它是什么&quot; class=&quot;headerlink&quot; title=&quot;它是什么&quot;&gt;&lt;/a&gt;它是什么&lt;/h1&gt;&lt;h3 id=&quot;术语定义&quot;&gt;&lt;a href=&quot;#术语定义&quot; class=&quot;headerlink&quot; title=&quot;术语定义&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="java8 lambda" scheme="http://yoursite.com/tags/java8-lambda/"/>
    
  </entry>
  
  <entry>
    <title>jdk安徽及环境配置一篇搞定</title>
    <link href="http://yoursite.com/2018/09/05/jdk%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%80%E7%AF%87%E6%90%9E%E5%AE%9A/"/>
    <id>http://yoursite.com/2018/09/05/jdk安装及环境配置一篇搞定/</id>
    <published>2018-09-05T09:41:39.000Z</published>
    <updated>2018-09-06T01:34:54.473Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者 <a href="https://www.zhihu.com/people/decode-life/activities" target="_blank" rel="noopener">Decodelife</a> 转载请注明出处</p></blockquote><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><blockquote><p>鉴于广大Java爱好者或初学者甚至老手，在面临一个新的开发环境是，总是要搭建一套初始工作环境，配置环境变量，有些时候还得是不是查阅下教程，特此整理了一份各个环境下的配置步骤，供大家查阅，<strong>以后大家环境变量一篇就够了</strong>，如果问题请指正</p></blockquote><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><ol><li><p><strong>下载jdk</strong></p><ul><li>首先我们需要下载java开发工具包JDK，下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a>，点击如下下载按钮：<br><img src="https://upload-images.jianshu.io/upload_images/1762862-1668938a243be4ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li><li>在下载页面中你需要选择接受许可，并根据自己的系统选择对应的版本，本文以 Window 64位系统为例：<br> <img src="https://upload-images.jianshu.io/upload_images/1762862-8ceb3654ef8e9c2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li><li><p>下载后JDK的安装根据提示进行，还有安装JDK的时候也会安装JRE，一并安装就可以了。</p><p>安装JDK，安装过程中可以自定义安装目录等信息，例如我们选择安装目录为 C:\Program Files (x86)\Java\jdk1.8.0_91。</p></li></ul><ol start="2"><li><p><strong>配置环境变量</strong></p><ul><li><p>安装完成后，右击”我的电脑”，点击”属性”，选择”高级系统设置”；<br><img src="https://upload-images.jianshu.io/upload_images/1762862-212fa4e378532202.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li><li><p>选择”高级”选项卡，点击”环境变量”；<br><img src="https://upload-images.jianshu.io/upload_images/1762862-517a9f4c11f054db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li><li><p>然后就会出现如下图所示的画面：<br><img src="https://upload-images.jianshu.io/upload_images/1762862-9929ceb9a65aea9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li><li><p>在”系统变量”中设置3项属性，JAVA_HOME,PATH,CLASSPATH(大小写无所谓),若已存在则点击”编辑”，不存在则点击”新建”。<br><em>变量设置参数如下</em><br>变量名：JAVA_HOME<br>变量值：C:\Program Files (x86)\Java\jdk1.8.0_91        // 要根据自己的实际路径配置<br>变量名：CLASSPATH<br>变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;         //记得前面有个”.”<br>变量名：Path<br>变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</p></li><li><p>JAVA_HOME 设置<br><img src="https://upload-images.jianshu.io/upload_images/1762862-503d5862199a0d00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/1762862-05ad455ebb469487.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li><li>PATH设置<br><img src="https://upload-images.jianshu.io/upload_images/1762862-99241e7744cd800f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/1762862-68e700b53a39b971.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><blockquote><p>注意：在 Windows10 中，Path 变量里是分条显示的，我们需要将 %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin; 分开添加，否则无法识别：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%JAVA_HOME%\bin;</span><br><span class="line">%JAVA_HOME%\jre\bin;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1762862-5bbd3b7decbaed89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></blockquote><ul><li>CLASSPATH 设置<br><img src="https://upload-images.jianshu.io/upload_images/1762862-5331fd0168412f51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><blockquote><p><strong>注意</strong>：如果使用1.5以上版本的JDK，不用设置CLASSPATH环境变量，也可以正常编译和运行Java程序</p></blockquote></li></ul></li></ol></li><li><p><strong>测试JDK是否安装成功</strong></p><ul><li><p>“开始”-&gt;”运行”，键入”cmd”；</p></li><li><p>键入命令: java -version、java、javac 几个命令，出现以下信息，说明环境变量配置成功；<br><img src="https://upload-images.jianshu.io/upload_images/1762862-2e4f279991d5881a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li></ul></li></ol><hr><h2 id="Linux（CentOS）MacOS类同"><a href="#Linux（CentOS）MacOS类同" class="headerlink" title="Linux（CentOS）MacOS类同"></a>Linux（CentOS）MacOS类同</h2><ol><li><p><strong>判断是否安装</strong></p><p> 首先，我们得判断机子上是不是安装了jdk，命令终端输入如下命令：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line"># 输出如下</span><br><span class="line">java version &quot;1.7.0_45&quot;</span><br><span class="line">OpenJDK Runtime Environment (rhel-2.4.3.2.el6_4-i386 u45-b15)</span><br><span class="line">OpenJDK Server VM (build 24.45-b08, mixed mode)</span><br></pre></td></tr></table></figure><p> 这看起来好像我的机子中已经安装了jdk，但是当我使用javac时，会提示：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-bash: javac: command not found</span><br></pre></td></tr></table></figure><p> 这说明第一个java命令，不是安装的jdk中的java命令，而是在$PATH的所有路径下有一个可以执行的java文件，说明jdk还是没有正确安装。这个要特别注意。</p></li><li><p><strong>安装jdk</strong></p><ul><li>去<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a>中下载jdk的安装文件。由于我的Linux是32位的，因此我下载jdk-8u25-linux-i586.tar.gz文件。</li><li><p>新建/usr/java文件夹，将jdk-8u25-linux-i586.tar.gz放到该文件夹中，并将工作目录切换到/usr/java目录下。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /usr</span><br><span class="line">## 创建目录（根据自己喜欢定义名称）</span><br><span class="line">mkdir java</span><br><span class="line">## 从官网下载压缩包</span><br><span class="line">wget http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-i586.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>执行命令tar -zxvf jdk-8u25-linux-i586.gz 进行解压，解压后发现/usr/java多了一个jdk1.8.0_25文件夹。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> ## 解压文件</span><br><span class="line">tar -xzvf jdk-8u181-linux-i586.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>通过以上步骤，jdk就已经全部安装完成了。下面，就是环境变量的配置。</p></li></ul></li><li><p><strong>配置环境变量</strong></p><ul><li>使用vim /etc/profile编辑profile文件</li><li><p>在/etc/profile底部加入如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_25</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure></li><li><p>以上，环境变量配置完成。</p><blockquote><ol><li>需要注意的是，PATH在配置的时候，一定要把\$JAVA_HOME/bin放在前面，不然使用java命令时，系统会找到以前的java，再不往下找了。这样java这个可执行文件运行的目录其实不在\$JAVA_HOME/bin下，而在其它目录下，会造成很大的问题。</li><li>还要注意，以前其它教程写的CLASSPATH=$JAVA_HOME/lib.tools.jar，不知道以前的版本是怎么样的，现在的版本是没有这样的jar包的。</li></ol></blockquote></li><li><p>最后使用如下命令让profile文件立即生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>命令测试</strong></p><ul><li>使用javac命令，不会出现command not found错误</li><li><p>使用java -version，出现版本为java version “1.8.0_25”<br><img src="https://upload-images.jianshu.io/upload_images/1762862-dc464a62d6f9a7bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li><li><p>echo \$JAVA_HOME, echo \$CLASSPATH, echo $PATH，看看自己的配置是否都正确。</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;作者 &lt;a href=&quot;https://www.zhihu.com/people/decode-life/activities&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Decodelife&lt;/a&gt; 转载请注明出处&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="jdk" scheme="http://yoursite.com/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/09/04/hello-world/"/>
    <id>http://yoursite.com/2018/09/04/hello-world/</id>
    <published>2018-09-04T11:06:06.753Z</published>
    <updated>2018-09-04T11:06:06.753Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
